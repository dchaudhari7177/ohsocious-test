rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if only following/followers arrays are being modified
    function isFollowOperation() {
      let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
      return affectedKeys.hasOnly(['following', 'followers']) ||
             affectedKeys.hasOnly(['following']) ||
             affectedKeys.hasOnly(['followers']);
    }

    // Helper function to check if user is a participant in a chat
    function isParticipant(participants) {
      return isAuthenticated() && 
        (request.auth.uid in participants);
    }

    // Users collection rules
    match /users/{userId} {
      // Allow reading basic profile info if signed in
      allow read: if isAuthenticated();
      
      // Allow users to update their own profile completely
      allow write, delete: if isOwner(userId);
      
      // Allow updating following/followers arrays for social connections
      allow update: if isAuthenticated() && (
        isOwner(userId) || // User can update their own document
        isFollowOperation() // Or update following/followers arrays only
      );
      
      // Allow reading user's own private data
      match /private/{document=**} {
        allow read, write: if isOwner(userId);
      }
      
      // Allow listing users for features like search
      allow list: if isAuthenticated();
    }

    // Notifications collection rules
    match /notifications/{notificationId} {
      // Allow reading notifications if user is the recipient
      allow read: if isAuthenticated() && 
        (resource == null || resource.data.recipientId == request.auth.uid);
      
      // Allow creating notifications if user is authenticated and is the sender
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid;
      
      // Allow updating notifications (e.g., marking as read) if user is the recipient
      allow update: if isAuthenticated() && 
        resource.data.recipientId == request.auth.uid;
      
      // Allow deleting notifications if user is the recipient
      allow delete: if isAuthenticated() && 
        resource.data.recipientId == request.auth.uid;
    }

    // Posts collection rules
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Messages collection rules
    match /messages/{messageId} {
      // Allow reading messages if user is a participant
      allow read: if isAuthenticated() && (
        resource == null ||
        request.auth.uid in resource.data.participants
      );
      
      // Allow creating messages if user is the sender and is a participant
      allow create: if isAuthenticated() && 
        request.resource.data.senderId == request.auth.uid &&
        request.auth.uid in request.resource.data.participants;
      
      // Allow updating messages if user is a participant
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      
      // Allow deleting messages if user is the sender
      allow delete: if isAuthenticated() && 
        resource.data.senderId == request.auth.uid;
    }

    // Chats collection rules
    match /chats/{chatId} {
      // Allow reading chats if user is a participant
      allow read: if isAuthenticated() && (
        resource == null ||
        request.auth.uid in resource.data.participants
      );
      
      // Allow creating chats if user is a participant
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      
      // Allow updating chats if user is a participant
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      
      // Allow deleting chats if all participants agree (for now, just allow participants to delete)
      allow delete: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
    }

    // Comments subcollection rules
    match /posts/{postId}/comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid);
    }

    // Connections collection rules
    match /connections/{connectionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (request.auth.uid in resource.data.participants);
    }

    // Reactions collection rules
    match /reactions/{reactionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid);
    }

    // Other collection rules...
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 