rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if user is a participant in a message
    function isParticipant(participants) {
      return isAuthenticated() && 
        (request.auth.uid in participants);
    }

    // Users collection rules
    match /users/{userId} {
      // Allow reading basic profile info if signed in
      allow read: if isAuthenticated();
      // Only allow users to update their own profile
      allow write, delete: if isOwner(userId);
      
      // Allow reading user's own private data
      match /private/{document=**} {
        allow read, write: if isOwner(userId);
      }

      // Allow listing users for features like search
      allow list: if isAuthenticated();
    }

    // Posts collection rules
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Confessions collection rules
    match /confessions/{confessionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid);
    }

    // Messages collection rules
    match /messages/{messageId} {
      function isParticipant() {
        return request.auth.uid in resource.data.participants;
      }

      // Allow reading messages if user is a participant
      allow list: if isAuthenticated();
      allow get: if isAuthenticated();
      
      // Allow creating messages
      allow create: if isAuthenticated() && 
        request.resource.data.participants.hasAll([request.auth.uid]);
      
      // Allow updating own messages or read status
      allow update: if isAuthenticated() && (
        request.auth.uid == resource.data.senderId || 
        (isParticipant() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']))
      );

      // Allow deleting messages if user is the sender or a participant
      allow delete: if isAuthenticated() && (
        request.auth.uid == resource.data.senderId ||
        request.auth.uid in resource.data.participants
      );
    }

    // Comments subcollection rules
    match /posts/{postId}/comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid);
    }

    // Connections collection rules
    match /connections/{connectionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (request.auth.uid in resource.data.participants);
    }

    // Reactions collection rules
    match /reactions/{reactionId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid);
    }
  }
} 